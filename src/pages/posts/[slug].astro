---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../components/layout.astro";
import Tag from "../../components/tag.astro";
import DateTag from "../../components/date-tag.astro";
import PostContent from "../../components/post/post-content.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
const { title, description, date, tags, cover } = post.data;
---

<Layout title={post.data.title} description={post.data.description}>
  <div>
    <div>
      <h1 id="header">{post.data.title}</h1>
      <div>
        <DateTag date={post.data.date} />
        {post.data.tags?.map((tag) => <Tag tag={tag} />)}
      </div>
      <p>{post.data.description}</p>
    </div>
    {
      post.data.cover && (
        <img src={`${post.data.cover}?w=1200&q=80`} alt="cover" />
      )
    }
  </div>
  <div>
    <PostContent post={post} />
  </div>
</Layout>

<script>
  import { annotate, annotationGroup } from "rough-notation";
  const notions = document.querySelectorAll("span[data-notion-identity]");
  const annotations = new Array(notions.length).fill(0).map((_, index) => {
    const node = notions[index] as HTMLSpanElement;
    const type = node.dataset.notionType;
    const color = node.dataset.notionColor;
    const strokeWidth = node.dataset.notionStrokewidth;
    
    return annotate(node, {
      type: (type as "underline") ?? "underline",
      color: color ?? "red",
      animate: false,
      multiline: type === "bracket" ? false : true,
      brackets: ["left", "right"],
      strokeWidth: Number(strokeWidth) ?? 1.5,
    });
  });
  annotationGroup(annotations).show();
</script>
